// ---------------- THIS FILE IS AUTOGENERATED - DO NOT MODIFY ----------------


// ================================ vec2 ================================

___vec2_get_metatable <- {
	x		= @(v) v.___immutable_x
	y		= @(v) v.___immutable_y
	xx		= @(v) ::vec2(v.___immutable_x,v.___immutable_x)
	xy		= @(v) v
	yx		= @(v) ::vec2(v.___immutable_y,v.___immutable_x)
	yy		= @(v) ::vec2(v.___immutable_y,v.___immutable_y)
	xxx		= @(v) ::vec3(v.___immutable_x,v.___immutable_x,v.___immutable_x)
	xxy		= @(v) ::vec3(v.___immutable_x,v.___immutable_x,v.___immutable_y)
	xyx		= @(v) ::vec3(v.___immutable_x,v.___immutable_y,v.___immutable_x)
	xyy		= @(v) ::vec3(v.___immutable_x,v.___immutable_y,v.___immutable_y)
	yxx		= @(v) ::vec3(v.___immutable_y,v.___immutable_x,v.___immutable_x)
	yxy		= @(v) ::vec3(v.___immutable_y,v.___immutable_x,v.___immutable_y)
	yyx		= @(v) ::vec3(v.___immutable_y,v.___immutable_y,v.___immutable_x)
	yyy		= @(v) ::vec3(v.___immutable_y,v.___immutable_y,v.___immutable_y)
}

___vec2_get_metatable[0] <- ___vec2_get_metatable.x
___vec2_get_metatable[1] <- ___vec2_get_metatable.y

class vec2 {
	___immutable_x = 0.;
	___immutable_y = 0.;

	constructor(...)
	{
		if( vargv.len() == 0 )
		{
			___immutable_x = 0.;
			___immutable_y = 0.;
		}
		else if( vargv.len() == 1 )
		{
			local v = vargv[0];
			if( v instanceof ::vec2 )
			{
				___immutable_x = v.x;
				___immutable_y = v.y;
			}
			else
			{
				switch(typeof(v))
				{
				case "integer":
					v += 0.;
				case "float":
					___immutable_x = v;
					___immutable_y = v;
					break;
				default:
					throw "Can't construct 'vec2' from a single '"+typeof(v)+"'"
				}
			}
		}
		else if( vargv.len() == 2 )
		{
			local x = vargv[0];
			local y = vargv[1];

			switch(typeof(x))
			{
			case "integer":
				x += 0.;
			case "float":
				___immutable_x = x;
				break;
			default:
				throw "Can't construct 'vec2' from '"+typeof(x)+"' and '"+typeof(y)+"'"
			}
			switch(typeof(y))
			{
			case "integer":
				y += 0.;
			case "float":
				___immutable_y = y;
				break;
			default:
				throw "Can't construct 'vec2' from '"+typeof(x)+"' and '"+typeof(y)+"'"
			}
		}
		else
			throw "Can't construct 'vec2' from "+vargv.len()+" parameters";
	}

	function _get(idx)
	{
		return ::___vec2_get_metatable[idx](this);
	}

	function _add(v) {
		if(v instanceof ::vec2) return ::vec2(___immutable_x+v.___immutable_x,___immutable_y+v.___immutable_y);
		switch(typeof(v))
		{
			case "integer":
			case "float":
				return ::vec2(___immutable_x+v,___immutable_y+v);
		}
		throw "Can't add 'vec2' and '"+typeof(v)+"'";
	}

	function _sub(v) {
		if(v instanceof ::vec2) return ::vec2(___immutable_x-v.___immutable_x,___immutable_y-v.___immutable_y);
		switch(typeof(v))
		{
			case "integer":
			case "float":
				return ::vec2(___immutable_x-v,___immutable_y-v);
		}
		throw "Can't subtract 'vec2' and '"+typeof(v)+"'";
	}

	function _mul(v) {
		if(v instanceof ::vec2) return ::vec2(___immutable_x*v.___immutable_x,___immutable_y*v.___immutable_y);
		switch(typeof(v))
		{
			case "integer":
			case "float":
				return ::vec2(___immutable_x*v,___immutable_y*v);
		}
		throw "Can't multiply 'vec2' and '"+typeof(v)+"'";
	}

	function _div(v) {
		if(v instanceof ::vec2) return ::vec2(___immutable_x/v.___immutable_x,___immutable_y/v.___immutable_y);
		switch(typeof(v))
		{
			case "integer":
			case "float":
				return ::vec2(___immutable_x/v,___immutable_y/v);
		}
		throw "Can't divide 'vec2' by '"+typeof(v)+"'";
	}

	function _modulo(v) {
		if(v instanceof ::vec2) return ::vec2(___immutable_x%v.___immutable_x,___immutable_y%v.___immutable_y);
		switch(typeof(v))
		{
			case "integer":
			case "float":
				return ::vec2(___immutable_x%v,___immutable_y%v);
		}
		throw "Can't modulo 'vec2' by '"+typeof(v)+"'";
	}

	function _unm() {
		return ::vec2(-___immutable_x,-___immutable_y);
	}

	function _typeof() {
		return "vec2";
	}

	function _cmp(v)
	{
		if(___immutable_x!=v.___immutable_x) return ___immutable_x - v.___immutable_x;
		return ___immutable_y - v.___immutable_y;
	}

	function _tostring()
	{
		return "vec2("+___immutable_x+","+___immutable_y+")";
	}
}


// ================================ vec3 ================================

___vec3_get_metatable <- {
	x		= @(v) v.___immutable_x
	y		= @(v) v.___immutable_y
	z		= @(v) v.___immutable_z

	xx		= @(v) ::vec2(v.___immutable_x,v.___immutable_x)
	xy		= @(v) ::vec2(v.___immutable_x,v.___immutable_y)
	xz		= @(v) ::vec2(v.___immutable_x,v.___immutable_z)
	yx		= @(v) ::vec2(v.___immutable_y,v.___immutable_x)
	yy		= @(v) ::vec2(v.___immutable_y,v.___immutable_y)
	yz		= @(v) ::vec2(v.___immutable_y,v.___immutable_z)
	zx		= @(v) ::vec2(v.___immutable_z,v.___immutable_x)
	zy		= @(v) ::vec2(v.___immutable_z,v.___immutable_y)
	zz		= @(v) ::vec2(v.___immutable_z,v.___immutable_z)
		
	xxx		= @(v) ::vec3(v.___immutable_x,v.___immutable_x,v.___immutable_x)
	xxy		= @(v) ::vec3(v.___immutable_x,v.___immutable_x,v.___immutable_y)
	xxz		= @(v) ::vec3(v.___immutable_x,v.___immutable_x,v.___immutable_z)
	xyx		= @(v) ::vec3(v.___immutable_x,v.___immutable_y,v.___immutable_x)
	xyy		= @(v) ::vec3(v.___immutable_x,v.___immutable_y,v.___immutable_y)
	xyz		= @(v) v
	xzx		= @(v) ::vec3(v.___immutable_x,v.___immutable_z,v.___immutable_x)
	xzy		= @(v) ::vec3(v.___immutable_x,v.___immutable_z,v.___immutable_y)
	xzz		= @(v) ::vec3(v.___immutable_x,v.___immutable_z,v.___immutable_z)

	yxx		= @(v) ::vec3(v.___immutable_y,v.___immutable_x,v.___immutable_x)
	yxy		= @(v) ::vec3(v.___immutable_y,v.___immutable_x,v.___immutable_y)
	yxz		= @(v) ::vec3(v.___immutable_y,v.___immutable_x,v.___immutable_z)
	yyx		= @(v) ::vec3(v.___immutable_y,v.___immutable_y,v.___immutable_x)
	yyy		= @(v) ::vec3(v.___immutable_y,v.___immutable_y,v.___immutable_y)
	yyz		= @(v) ::vec3(v.___immutable_y,v.___immutable_y,v.___immutable_z)
	yzx		= @(v) ::vec3(v.___immutable_y,v.___immutable_z,v.___immutable_x)
	yzy		= @(v) ::vec3(v.___immutable_y,v.___immutable_z,v.___immutable_y)
	yzz		= @(v) ::vec3(v.___immutable_y,v.___immutable_z,v.___immutable_z)

	zxx		= @(v) ::vec3(v.___immutable_z,v.___immutable_x,v.___immutable_x)
	zxy		= @(v) ::vec3(v.___immutable_z,v.___immutable_x,v.___immutable_y)
	zxz		= @(v) ::vec3(v.___immutable_z,v.___immutable_x,v.___immutable_z)
	zyx		= @(v) ::vec3(v.___immutable_z,v.___immutable_y,v.___immutable_x)
	zyy		= @(v) ::vec3(v.___immutable_z,v.___immutable_y,v.___immutable_y)
	zyz		= @(v) ::vec3(v.___immutable_z,v.___immutable_y,v.___immutable_z)
	zzx		= @(v) ::vec3(v.___immutable_z,v.___immutable_z,v.___immutable_x)
	zzy		= @(v) ::vec3(v.___immutable_z,v.___immutable_z,v.___immutable_y)
	zzz		= @(v) ::vec3(v.___immutable_z,v.___immutable_z,v.___immutable_z)
}

___vec3_get_metatable[0] <- ___vec3_get_metatable.x
___vec3_get_metatable[1] <- ___vec3_get_metatable.y
___vec3_get_metatable[2] <- ___vec3_get_metatable.z

for(local i=0;i<3;i++)
{
	___vec3_get_metatable["rgb"[i].tochar()] <- ___vec3_get_metatable["xyz"[i].tochar()]
	for(local j=0;j<3;j++)
	{
		___vec3_get_metatable["rgb"[i].tochar()+"rgb"[j].tochar()] <-
			___vec3_get_metatable["xyz"[i].tochar()+"xyz"[j].tochar()]
	
		for(local k=0;k<3;k++)
			___vec3_get_metatable["rgb"[i].tochar()+"rgb"[j].tochar()+"rgb"[k].tochar()] <-
				___vec3_get_metatable["xyz"[i].tochar()+"xyz"[j].tochar()+"xyz"[k].tochar()]
	}
}


class vec3 {
	___immutable_x = 0.;
	___immutable_y = 0.;
	___immutable_z = 0.;

	constructor(...)
	{
		if( vargv.len() == 0 )
		{
			___immutable_x = 0.;
			___immutable_y = 0.;
			___immutable_z = 0.;
		}
		else if( vargv.len() == 1 )
		{
			local v = vargv[0];

			if( v instanceof ::vec3 )
			{
				___immutable_x = v.x;
				___immutable_y = v.y;
				___immutable_z = v.z;
			}
			else
			{
				switch(typeof(v))
				{
				case "integer":
					v += 0.;
				case "float":
					___immutable_x = v;
					___immutable_y = v;
					___immutable_z = v;
					break;
				default:
					throw "Can't construct 'vec3' from a single '"+typeof(v)+"'"
				}
			}
		}
		else if( vargv.len() == 2 )
		{
			local a = vargv[0];
			local b = vargv[1];

			if(a instanceof ::vec2)
			{
				switch(typeof(b))
				{
				case "integer":
					b += 0.;
				case "float":
					___immutable_x = a.___immutable_x;
					___immutable_y = a.___immutable_y;
					___immutable_z = b;
					break;
				default:
					throw "Can't construct 'vec3' from '"+typeof(a)+"' and '"+typeof(b)+"'"
				}
			}
			else if(b instanceof ::vec2)
			{
				switch(typeof(a))
				{
				case "integer":
					a += 0.;
				case "float":
					___immutable_x = a;
					___immutable_y = b.___immutable_x;
					___immutable_z = b.___immutable_y;
					break;
				default:
					throw "Can't construct 'vec3' from '"+typeof(a)+"' and '"+typeof(b)+"'"
				}
			}
			else
				throw "Can't construct 'vec3' from '"+typeof(a)+"' and '"+typeof(b)+"'"
		}
		else if( vargv.len() == 3 )
		{
			local x = vargv[0];
			local y = vargv[1];
			local z = vargv[2];

			switch(typeof(x))
			{
			case "integer":
				x += 0.;
			case "float":
				___immutable_x = x;
				break;
			default:
				throw "Can't construct 'vec3' from '"+typeof(x)+"', '"+typeof(y)+"' and '"+typeof(z)+"'"
			}
			switch(typeof(y))
			{
			case "integer":
				y += 0.;
			case "float":
				___immutable_y = y;
				break;
			default:
				throw "Can't construct 'vec3' from '"+typeof(x)+"', '"+typeof(y)+"' and '"+typeof(z)+"'"
			}
			switch(typeof(z))
			{
			case "integer":
				z += 0.;
			case "float":
				___immutable_z = z;
				break;
			default:
				throw "Can't construct 'vec3' from '"+typeof(x)+"', '"+typeof(y)+"' and '"+typeof(z)+"'"
			}
		}
		else
			throw "Can't construct 'vec3' from "+vargv.len()+" parameters";
	}

	function _get(idx)
	{
		return ::___vec3_get_metatable[idx](this);
	}

	function _add(v) {
		if(v instanceof ::vec3) return ::vec3(___immutable_x+v.___immutable_x,___immutable_y+v.___immutable_y,___immutable_z+v.___immutable_z);
		switch(typeof(v))
		{
			case "integer":
			case "float":
				return ::vec3(___immutable_x+v,___immutable_y+v,___immutable_z+v);
		}
		throw "Can't add 'vec3' and '"+typeof(v)+"'";
	}

	function _sub(v) {
		if(v instanceof ::vec3) return ::vec3(___immutable_x-v.___immutable_x,___immutable_y-v.___immutable_y,___immutable_z-v.___immutable_z);
		switch(typeof(v))
		{
			case "integer":
			case "float":
				return ::vec3(___immutable_x-v,___immutable_y-v,___immutable_z-v);
		}
		throw "Can't subtract 'vec3' and '"+typeof(v)+"'";
	}

	function _mul(v) {
		if(v instanceof ::vec3) return ::vec3(___immutable_x*v.___immutable_x,___immutable_y*v.___immutable_y,___immutable_z*v.___immutable_z);
		switch(typeof(v))
		{
			case "integer":
			case "float":
				return ::vec3(___immutable_x*v,___immutable_y*v,___immutable_z*v);
		}
		throw "Can't multiply 'vec3' and '"+typeof(v)+"'";
	}

	function _div(v) {
		if(v instanceof ::vec3) return ::vec3(___immutable_x/v.___immutable_x,___immutable_y/v.___immutable_y,___immutable_z/v.___immutable_z);
		switch(typeof(v))
		{
			case "integer":
			case "float":
				return ::vec3(___immutable_x/v,___immutable_y/v,___immutable_z/v);
		}
		throw "Can't divide 'vec3' by '"+typeof(v)+"'";
	}

	function _modulo(v) {
		if(v instanceof ::vec3) return ::vec3(___immutable_x%v.___immutable_x,___immutable_y%v.___immutable_y,___immutable_z%v.___immutable_z);
		switch(typeof(v))
		{
			case "integer":
			case "float":
				return ::vec3(___immutable_x%v,___immutable_y%v,___immutable_z%v);
		}
		throw "Can't modulo 'vec3' by '"+typeof(v)+"'";
	}

	function _unm() {
		return ::vec3(-___immutable_x,-___immutable_y,-___immutable_z);
	}

	function _typeof() {
		return "vec3";
	}

	function _cmp(v)
	{
		if(___immutable_x!=v.___immutable_x) return ___immutable_x - v.___immutable_x;
		if(___immutable_y!=v.___immutable_y) return ___immutable_y - v.___immutable_y;
		return ___immutable_z - v.___immutable_z;
	}

	function _tostring()
	{
		return "vec3("+___immutable_x+","+___immutable_y+","+___immutable_z+")";
	}
}

// ================================ functions ================================


// -------------------- length --------------------

function length(v)
{
	if( v instanceof ::vec2 )
	{
		return ::_math_sqrt(
			v.___immutable_x*v.___immutable_x +
			v.___immutable_y*v.___immutable_y
			);
	}
	else if( v instanceof ::vec3 )
	{
		return ::_math_sqrt(
			v.___immutable_x*v.___immutable_x +
			v.___immutable_y*v.___immutable_y +
			v.___immutable_z*v.___immutable_z
			);
	}

	throw "length: can't compute length of '"+typeof(v)+"'";
}


// -------------------- normalize --------------------

function normalize(v)
{
	if( v instanceof ::vec2 )
	{
		local len = ::_math_sqrt(
			v.___immutable_x*v.___immutable_x +
			v.___immutable_y*v.___immutable_y
			);
		if(len) len=1/len;
		return ::vec2( v.___immutable_x*len, v.___immutable_y*len );
	}
	else if( v instanceof ::vec3 )
	{
		local len = ::_math_sqrt(
			v.___immutable_x*v.___immutable_x +
			v.___immutable_y*v.___immutable_y +
			v.___immutable_z*v.___immutable_z
			);
		if(len) len=1/len;
		return ::vec3( v.___immutable_x*len, v.___immutable_y*len, v.___immutable_z*len );
	}

	throw "normalize: can't normalize '"+typeof(v)+"'";
}


// -------------------- dot --------------------

function dot(a,b)
{
	if(a instanceof ::vec2)
	{
		if(b instanceof ::vec2) return a.___immutable_x*b.___immutable_x + a.___immutable_y*b.___immutable_y;
		switch(typeof(b))
		{
			case "integer":
			case "float":
				return (a.___immutable_x + a.___immutable_y) * b;
		}
	}
	else if(b instanceof ::vec2)
	{
		switch(typeof(a))
		{
			case "integer":
			case "float":
				return (b.___immutable_x + b.___immutable_y) * a;
		}
	}
	else if(a instanceof ::vec3)
	{
		if(b instanceof ::vec3) return a.___immutable_x*b.___immutable_x + a.___immutable_y*b.___immutable_y + a.___immutable_z*b.___immutable_z;
		switch(typeof(b))
		{
			case "integer":
			case "float":
				return (a.___immutable_x + a.___immutable_y + a.___immutable_z) * b;
		}
	}
	else if(b instanceof ::vec3)
	{
		switch(typeof(a))
		{
			case "integer":
			case "float":
				return (b.___immutable_x + b.___immutable_y + b.___immutable_z) * a;
		}
	}

	throw "dot: can't compute dot product of '"+typeof(a)+"' and '"+typeof(b)+"'";
}


// -------------------- cross --------------------

function cross(a,b)
{
	if( (a instanceof ::vec2) && (b instanceof ::vec2) )
	{
		return	a.___immutable_x*b.___immutable_y - a.___immutable_y*b.___immutable_x;
	}
	else if( (a instanceof ::vec3) && (b instanceof ::vec3) )
	{
		return ::vec3(
				a.___immutable_y*b.___immutable_z - a.___immutable_z*b.___immutable_y,
				a.___immutable_z*b.___immutable_x - a.___immutable_x*b.___immutable_z,
				a.___immutable_x*b.___immutable_y - a.___immutable_y*b.___immutable_x
			);
	}

	throw "cross: can't compute cross product of '"+typeof(a)+"' and '"+typeof(b)+"'";
}

// -------------------- saturate --------------------

function saturate(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				(v.___immutable_x>=0) ? ((v.___immutable_x<=1) ? v.___immutable_x : 1.) : 0.,
				(v.___immutable_y>=0) ? ((v.___immutable_y<=1) ? v.___immutable_y : 1.) : 0.
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				(v.___immutable_x>=0) ? ((v.___immutable_x<=1) ? v.___immutable_x : 1.) : 0.,
				(v.___immutable_y>=0) ? ((v.___immutable_y<=1) ? v.___immutable_y : 1.) : 0.,
				(v.___immutable_z>=0) ? ((v.___immutable_z<=1) ? v.___immutable_z : 1.) : 0.
			)
	}
	else switch( typeof(v) )
	{
	case "integer":
	case "float":
		return (v>=0) ? ((v<=1) ? v : 1.) : 0.
	}

	throw "saturate: can't saturate "+typeof(v)
}

// -------------------- min --------------------

function min(a,b)
{
	if( a instanceof ::vec2 )
	{
		if( b instanceof ::vec2 )
		{
			return ::vec2(
					(a.___immutable_x<b.___immutable_x) ? a.___immutable_x : b.___immutable_x,
					(a.___immutable_y<b.___immutable_y) ? a.___immutable_y : b.___immutable_y
				)
		}
		else switch( typeof(b) )
		{
		case "integer":
		case "float":
			return ::vec2(
					(a.___immutable_x<b) ? a.___immutable_x : b,
					(a.___immutable_y<b) ? a.___immutable_y : b
				)
		}
	}
	else if( a instanceof ::vec3 )
	{
		if( b instanceof ::vec3 )
		{
			return ::vec3(
					(a.___immutable_x<b.___immutable_x) ? a.___immutable_x : b.___immutable_x,
					(a.___immutable_y<b.___immutable_y) ? a.___immutable_y : b.___immutable_y,
					(a.___immutable_z<b.___immutable_z) ? a.___immutable_z : b.___immutable_z
				)
		}
		else switch( typeof(b) )
		{
		case "integer":
		case "float":
			return ::vec3(
					(a.___immutable_x<b) ? a.___immutable_x : b,
					(a.___immutable_y<b) ? a.___immutable_y : b,
					(a.___immutable_z<b) ? a.___immutable_z : b
				)
		}
	}
	else switch( typeof(a) )
	{
	case "integer":
	case "float":
		if( b instanceof ::vec2 )
		{
			return ::vec2(
					(a<b.___immutable_x) ? a : b.___immutable_x,
					(a<b.___immutable_y) ? a : b.___immutable_y
				)
		}
		else if( b instanceof ::vec3 )
		{
			return ::vec3(
					(a<b.___immutable_x) ? a : b.___immutable_x,
					(a<b.___immutable_y) ? a : b.___immutable_y,
					(a<b.___immutable_z) ? a : b.___immutable_z
				)
		}
		else switch( typeof(b) )
		{
		case "integer":
		case "float":
			return (a<b) ? a : b
		}
	}

	throw "min: can't compute minimum of "+typeof(a)+" and "+typeof(b)
}

// -------------------- max --------------------

function max(a,b)
{
	if( a instanceof ::vec2 )
	{
		if( b instanceof ::vec2 )
		{
			return ::vec2(
					(a.___immutable_x>b.___immutable_x) ? a.___immutable_x : b.___immutable_x,
					(a.___immutable_y>b.___immutable_y) ? a.___immutable_y : b.___immutable_y
				)
		}
		else switch( typeof(b) )
		{
		case "integer":
		case "float":
			return ::vec2(
					(a.___immutable_x>b) ? a.___immutable_x : b,
					(a.___immutable_y>b) ? a.___immutable_y : b
				)
		}
	}
	else if( a instanceof ::vec3 )
	{
		if( b instanceof ::vec3 )
		{
			return ::vec3(
					(a.___immutable_x>b.___immutable_x) ? a.___immutable_x : b.___immutable_x,
					(a.___immutable_y>b.___immutable_y) ? a.___immutable_y : b.___immutable_y,
					(a.___immutable_z>b.___immutable_z) ? a.___immutable_z : b.___immutable_z
				)
		}
		else switch( typeof(b) )
		{
		case "integer":
		case "float":
			return ::vec3(
					(a.___immutable_x>b) ? a.___immutable_x : b,
					(a.___immutable_y>b) ? a.___immutable_y : b,
					(a.___immutable_z>b) ? a.___immutable_z : b
				)
		}
	}
	else switch( typeof(a) )
	{
	case "integer":
	case "float":
		if( b instanceof ::vec2 )
		{
			return ::vec2(
					(a>b.___immutable_x) ? a : b.___immutable_x,
					(a>b.___immutable_y) ? a : b.___immutable_y
				)
		}
		else if( b instanceof ::vec3 )
		{
			return ::vec3(
					(a>b.___immutable_x) ? a : b.___immutable_x,
					(a>b.___immutable_y) ? a : b.___immutable_y,
					(a>b.___immutable_z) ? a : b.___immutable_z
				)
		}
		else switch( typeof(b) )
		{
		case "integer":
		case "float":
			return (a>b) ? a : b
		}
	}

	throw "max: can't compute maximum of "+typeof(a)+" and "+typeof(b)
}

// -------------------- clamp --------------------

function clamp(a,b,c)
{
	try			return max(min(a,c),b)
	catch(e)	throw "clamp: can't clamp "+typeof(a)+", "+typeof(b)+" and "+typeof(c)
}

// -------------------- reflect --------------------

function reflect(v,n)
{
	try			return v - n*(2*dot(v,n))
	catch(e)	throw "reflect: can't compute reflection for "+typeof(v)+" and "+typeof(n)
}


// -------------------- abs --------------------

function abs(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				(v.___immutable_x<0) ? -v.___immutable_x : v.___immutable_x,
				(v.___immutable_y<0) ? -v.___immutable_y : v.___immutable_y
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				(v.___immutable_x<0) ? -v.___immutable_x : v.___immutable_x,
				(v.___immutable_y<0) ? -v.___immutable_y : v.___immutable_y,
				(v.___immutable_z<0) ? -v.___immutable_z : v.___immutable_z
			)
	}
	else switch( typeof(v) )
	{
	case "integer":
	case "float":
		return (v<0) ? -v : v
	}

	throw "abs: can't compute absolute of "+typeof(v)
}


// -------------------- acos --------------------

if(!rawin("_math_acos")) _math_acos <- acos;

function acos(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_acos(v.___immutable_x),
				::_math_acos(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_acos(v.___immutable_x),
				::_math_acos(v.___immutable_y),
				::_math_acos(v.___immutable_z)
			)
	}

	return ::_math_acos(v)
}

// -------------------- asin --------------------

if(!rawin("_math_asin")) _math_asin <- asin;

function asin(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_asin(v.___immutable_x),
				::_math_asin(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_asin(v.___immutable_x),
				::_math_asin(v.___immutable_y),
				::_math_asin(v.___immutable_z)
			)
	}

	return ::_math_asin(v)
}

// -------------------- atan --------------------

if(!rawin("_math_atan")) _math_atan <- atan;

function atan(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_atan(v.___immutable_x),
				::_math_atan(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_atan(v.___immutable_x),
				::_math_atan(v.___immutable_y),
				::_math_atan(v.___immutable_z)
			)
	}

	return ::_math_atan(v)
}

// -------------------- ceil --------------------

if(!rawin("_math_ceil")) _math_ceil <- ceil;

function ceil(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_ceil(v.___immutable_x),
				::_math_ceil(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_ceil(v.___immutable_x),
				::_math_ceil(v.___immutable_y),
				::_math_ceil(v.___immutable_z)
			)
	}

	return ::_math_ceil(v)
}

// -------------------- cos --------------------

if(!rawin("_math_cos")) _math_cos <- cos;

function cos(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_cos(v.___immutable_x),
				::_math_cos(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_cos(v.___immutable_x),
				::_math_cos(v.___immutable_y),
				::_math_cos(v.___immutable_z)
			)
	}

	return ::_math_cos(v)
}

// -------------------- exp --------------------

if(!rawin("_math_exp")) _math_exp <- exp;

function exp(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_exp(v.___immutable_x),
				::_math_exp(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_exp(v.___immutable_x),
				::_math_exp(v.___immutable_y),
				::_math_exp(v.___immutable_z)
			)
	}

	return ::_math_exp(v)
}

// -------------------- floor --------------------

if(!rawin("_math_floor")) _math_floor <- floor;

function floor(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_floor(v.___immutable_x),
				::_math_floor(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_floor(v.___immutable_x),
				::_math_floor(v.___immutable_y),
				::_math_floor(v.___immutable_z)
			)
	}

	return ::_math_floor(v)
}

// -------------------- log --------------------

if(!rawin("_math_log")) _math_log <- log;

function log(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_log(v.___immutable_x),
				::_math_log(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_log(v.___immutable_x),
				::_math_log(v.___immutable_y),
				::_math_log(v.___immutable_z)
			)
	}

	return ::_math_log(v)
}

// -------------------- log10 --------------------

if(!rawin("_math_log10")) _math_log10 <- log10;

function log10(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_log10(v.___immutable_x),
				::_math_log10(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_log10(v.___immutable_x),
				::_math_log10(v.___immutable_y),
				::_math_log10(v.___immutable_z)
			)
	}

	return ::_math_log10(v)
}

// -------------------- pow --------------------

if(!rawin("_math_pow")) _math_pow <- pow;

function pow(v,e)
{
	if( v instanceof ::vec2 )
	{
		if( e instanceof ::vec2 )
		{
			return ::vec2(
					::_math_pow(v.___immutable_x,e.___immutable_x),
					::_math_pow(v.___immutable_y,e.___immutable_y)
				)
		}
		else switch( typeof(e) )
		{
		case "integer":
		case "float":
			return ::vec2(
					::_math_pow(v.___immutable_x,e),
					::_math_pow(v.___immutable_y,e)
				)
		}
	}
	else if( v instanceof ::vec3 )
	{
		if( e instanceof ::vec3 )
		{
			return ::vec3(
					::_math_pow(v.___immutable_x,e.___immutable_x),
					::_math_pow(v.___immutable_y,e.___immutable_y),
					::_math_pow(v.___immutable_z,e.___immutable_z)
				)
		}
		else switch( typeof(e) )
		{
		case "integer":
		case "float":
			return ::vec3(
					::_math_pow(v.___immutable_x,e),
					::_math_pow(v.___immutable_y,e),
					::_math_pow(v.___immutable_z,e)
				)
		}
	}
	else switch( typeof(v) )
	{
	case "integer":
	case "float":
		if( e instanceof ::vec2 )
		{
			return ::vec2(
					::_math_pow(v,e.___immutable_x),
					::_math_pow(v,e.___immutable_y)
				)
		}
		else if( e instanceof ::vec3 )
		{
			return ::vec3(
					::_math_pow(v,e.___immutable_x),
					::_math_pow(v,e.___immutable_y),
					::_math_pow(v,e.___immutable_z)
				)
		}
	}

	return ::_math_pow(v,e)
}

// -------------------- sin --------------------

if(!rawin("_math_sin")) _math_sin <- sin;

function sin(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_sin(v.___immutable_x),
				::_math_sin(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_sin(v.___immutable_x),
				::_math_sin(v.___immutable_y),
				::_math_sin(v.___immutable_z)
			)
	}

	return ::_math_sin(v)
}

// -------------------- sqrt --------------------

if(!rawin("_math_sqrt")) _math_sqrt <- sqrt;

function sqrt(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_sqrt(v.___immutable_x),
				::_math_sqrt(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_sqrt(v.___immutable_x),
				::_math_sqrt(v.___immutable_y),
				::_math_sqrt(v.___immutable_z)
			)
	}

	return ::_math_sqrt(v)
}

// -------------------- tan --------------------

if(!rawin("_math_tan")) _math_tan <- tan;

function tan(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				::_math_tan(v.___immutable_x),
				::_math_tan(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				::_math_tan(v.___immutable_x),
				::_math_tan(v.___immutable_y),
				::_math_tan(v.___immutable_z)
			)
	}

	return ::_math_tan(v)
}


// -------------------- frac --------------------

function frac(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				v.___immutable_x - ::_math_floor(v.___immutable_x),
				v.___immutable_y - ::_math_floor(v.___immutable_y)
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				v.___immutable_x - ::_math_floor(v.___immutable_x),
				v.___immutable_y - ::_math_floor(v.___immutable_y),
				v.___immutable_z - ::_math_floor(v.___immutable_z)
			)
	}
	else switch( typeof(v) )
	{
	case "integer":
	case "float":
		return v - ::_math_floor(v)
	}

	throw "frac: can't compute frac of "+typeof(v)
}

// -------------------- step --------------------

function step(y,x)
{
	if( y instanceof ::vec2 )
	{
		if( x instanceof ::vec2 )
		{
			return ::vec2(
					(x.___immutable_x>=y.___immutable_x)?1.:0.,
					(x.___immutable_y>=y.___immutable_y)?1.:0.
				)
		}
		else switch( typeof(x) )
		{
		case "integer":
		case "float":
			return ::vec2(
					(x>=y.___immutable_x)?1.:0.,
					(x>=y.___immutable_y)?1.:0.
				)
		}
	}
	else if( y instanceof ::vec3 )
	{
		if( x instanceof ::vec3 )
		{
			return ::vec3(
					(x.___immutable_x>=y.___immutable_x)?1.:0.,
					(x.___immutable_y>=y.___immutable_y)?1.:0.,
					(x.___immutable_z>=y.___immutable_z)?1.:0.
				)
		}
		else switch( typeof(x) )
		{
		case "integer":
		case "float":
			return ::vec3(
					(x>=y.___immutable_x)?1.:0.,
					(x>=y.___immutable_y)?1.:0.,
					(x>=y.___immutable_z)?1.:0.
				)
		}
	}
	else switch( typeof(y) )
	{
	case "integer":
	case "float":
		if( x instanceof ::vec2 )
		{
			return ::vec2(
					(x.___immutable_x>=y)?1.:0.,
					(x.___immutable_y>=y)?1.:0.
				)
		}
		else if( x instanceof ::vec3 )
		{
			return ::vec3(
					(x.___immutable_x>=y)?1.:0.,
					(x.___immutable_y>=y)?1.:0.,
					(x.___immutable_z>=y)?1.:0.
				)
		}
		else switch( typeof(x) )
		{
		case "integer":
		case "float":
			return (x>=y)?1.:0.
		}
	}

	throw "step: can't compute step of "+typeof(y)+" and "+typeof(x)
}

// -------------------- sign --------------------

function sign(v)
{
	if( v instanceof ::vec2 )
	{
		return ::vec2(
				(v.___immutable_x>=0) ? ((v.___immutable_x>0) ? 1. : 0.) : -1.,
				(v.___immutable_y>=0) ? ((v.___immutable_y>0) ? 1. : 0.) : -1.
			)
	}
	else if( v instanceof ::vec3 )
	{
		return ::vec3(
				(v.___immutable_x>=0) ? ((v.___immutable_x>0) ? 1. : 0.) : -1.,
				(v.___immutable_y>=0) ? ((v.___immutable_y>0) ? 1. : 0.) : -1.,
				(v.___immutable_z>=0) ? ((v.___immutable_z>0) ? 1. : 0.) : -1.
			)
	}
	else switch( typeof(v) )
	{
	case "integer":
	case "float":
		return (v>=0) ? ((v>0) ? 1. : 0.) : -1.
	}

	throw "sign: can't compute sign of "+typeof(v)
}

// -------------------- lerp --------------------

function lerp(a,b,p)
{
	try			return a + (b-a)*p
	catch(e)	throw "lerp: can't lerp "+typeof(a)+", "+typeof(b)+" and "+typeof(p)
}

// -------------------- smoothstep --------------------

function smoothstep(vmin,vmax,p)
{
	if( vmin instanceof ::vec2 )
	{
		if( vmax instanceof ::vec2 )
		{
			if( p instanceof ::vec2 )
			{
				return ::vec2(
						(p.___immutable_x>vmin.___immutable_x) ? ((p.___immutable_x<vmax.___immutable_x) ? (p.___immutable_x-vmin.___immutable_x)/(vmax.___immutable_x-vmin.___immutable_x+0.) : 1.) : 0.,
						(p.___immutable_y>vmin.___immutable_y) ? ((p.___immutable_y<vmax.___immutable_y) ? (p.___immutable_y-vmin.___immutable_y)/(vmax.___immutable_y-vmin.___immutable_y+0.) : 1.) : 0.
					)
			}
			else switch( typeof(p) )
			{
			case "integer":
			case "float":
				return ::vec2(
						(p>vmin.___immutable_x) ? ((p<vmax.___immutable_x) ? (p-vmin.___immutable_x)/(vmax.___immutable_x-vmin.___immutable_x+0.) : 1.) : 0.,
						(p>vmin.___immutable_y) ? ((p<vmax.___immutable_y) ? (p-vmin.___immutable_y)/(vmax.___immutable_y-vmin.___immutable_y+0.) : 1.) : 0.
					)
			}
		}
		else switch( typeof(vmax) )
		{
		case "integer":
		case "float":
			if( p instanceof ::vec2 )
			{
				return ::vec2(
						(p.___immutable_x>vmin.___immutable_x) ? ((p.___immutable_x<vmax) ? (p.___immutable_x-vmin.___immutable_x)/(vmax-vmin.___immutable_x+0.) : 1.) : 0.,
						(p.___immutable_y>vmin.___immutable_y) ? ((p.___immutable_y<vmax) ? (p.___immutable_y-vmin.___immutable_y)/(vmax-vmin.___immutable_y+0.) : 1.) : 0.
					)
			}
			else switch( typeof(p) )
			{
			case "integer":
			case "float":
				return ::vec2(
						(p>vmin.___immutable_x) ? ((p<vmax) ? (p-vmin.___immutable_x)/(vmax-vmin.___immutable_x+0.) : 1.) : 0.,
						(p>vmin.___immutable_y) ? ((p<vmax) ? (p-vmin.___immutable_y)/(vmax-vmin.___immutable_y+0.) : 1.) : 0.
					)
			}
		}
	}
	else if( vmin instanceof ::vec3 )
	{
		if( vmax instanceof ::vec3 )
		{
			if( p instanceof ::vec3 )
			{
				return ::vec3(
						(p.___immutable_x>vmin.___immutable_x) ? ((p.___immutable_x<vmax.___immutable_x) ? (p.___immutable_x-vmin.___immutable_x)/(vmax.___immutable_x-vmin.___immutable_x+0.) : 1.) : 0.,
						(p.___immutable_y>vmin.___immutable_y) ? ((p.___immutable_y<vmax.___immutable_y) ? (p.___immutable_y-vmin.___immutable_y)/(vmax.___immutable_y-vmin.___immutable_y+0.) : 1.) : 0.,
						(p.___immutable_z>vmin.___immutable_z) ? ((p.___immutable_z<vmax.___immutable_z) ? (p.___immutable_z-vmin.___immutable_z)/(vmax.___immutable_z-vmin.___immutable_z+0.) : 1.) : 0.
					)
			}
			else switch( typeof(p) )
			{
			case "integer":
			case "float":
				return ::vec3(
						(p>vmin.___immutable_x) ? ((p<vmax.___immutable_x) ? (p-vmin.___immutable_x)/(vmax.___immutable_x-vmin.___immutable_x+0.) : 1.) : 0.,
						(p>vmin.___immutable_y) ? ((p<vmax.___immutable_y) ? (p-vmin.___immutable_y)/(vmax.___immutable_y-vmin.___immutable_y+0.) : 1.) : 0.,
						(p>vmin.___immutable_z) ? ((p<vmax.___immutable_z) ? (p-vmin.___immutable_z)/(vmax.___immutable_z-vmin.___immutable_z+0.) : 1.) : 0.
					)
			}
		}
		else switch( typeof(vmax) )
		{
		case "integer":
		case "float":
			if( p instanceof ::vec3 )
			{
				return ::vec3(
						(p.___immutable_x>vmin.___immutable_x) ? ((p.___immutable_x<vmax) ? (p.___immutable_x-vmin.___immutable_x)/(vmax-vmin.___immutable_x+0.) : 1.) : 0.,
						(p.___immutable_y>vmin.___immutable_y) ? ((p.___immutable_y<vmax) ? (p.___immutable_y-vmin.___immutable_y)/(vmax-vmin.___immutable_y+0.) : 1.) : 0.,
						(p.___immutable_z>vmin.___immutable_z) ? ((p.___immutable_z<vmax) ? (p.___immutable_z-vmin.___immutable_z)/(vmax-vmin.___immutable_z+0.) : 1.) : 0.
					)
			}
			else switch( typeof(p) )
			{
			case "integer":
			case "float":
				return ::vec3(
						(p>vmin.___immutable_x) ? ((p<vmax) ? (p-vmin.___immutable_x)/(vmax-vmin.___immutable_x+0.) : 1.) : 0.,
						(p>vmin.___immutable_y) ? ((p<vmax) ? (p-vmin.___immutable_y)/(vmax-vmin.___immutable_y+0.) : 1.) : 0.,
						(p>vmin.___immutable_z) ? ((p<vmax) ? (p-vmin.___immutable_z)/(vmax-vmin.___immutable_z+0.) : 1.) : 0.
					)
			}
		}
	}
	else switch( typeof(vmin) )
	{
	case "integer":
	case "float":
		if( vmax instanceof ::vec2 )
		{
			if( p instanceof ::vec2 )
			{
				return ::vec2(
						(p.___immutable_x>vmin) ? ((p.___immutable_x<vmax.___immutable_x) ? (p.___immutable_x-vmin)/(vmax.___immutable_x-vmin+0.) : 1.) : 0.,
						(p.___immutable_y>vmin) ? ((p.___immutable_y<vmax.___immutable_y) ? (p.___immutable_y-vmin)/(vmax.___immutable_y-vmin+0.) : 1.) : 0.
					)
			}
			else switch( typeof(p) )
			{
			case "integer":
			case "float":
				return ::vec2(
						(p>vmin) ? ((p<vmax.___immutable_x) ? (p-vmin)/(vmax.___immutable_x-vmin+0.) : 1.) : 0.,
						(p>vmin) ? ((p<vmax.___immutable_y) ? (p-vmin)/(vmax.___immutable_y-vmin+0.) : 1.) : 0.
					)
			}
		}
		else if( vmax instanceof ::vec3 )
		{
			if( p instanceof ::vec3 )
			{
				return ::vec3(
						(p.___immutable_x>vmin) ? ((p.___immutable_x<vmax.___immutable_x) ? (p.___immutable_x-vmin)/(vmax.___immutable_x-vmin+0.) : 1.) : 0.,
						(p.___immutable_y>vmin) ? ((p.___immutable_y<vmax.___immutable_y) ? (p.___immutable_y-vmin)/(vmax.___immutable_y-vmin+0.) : 1.) : 0.,
						(p.___immutable_z>vmin) ? ((p.___immutable_z<vmax.___immutable_z) ? (p.___immutable_z-vmin)/(vmax.___immutable_z-vmin+0.) : 1.) : 0.
					)
			}
			else switch( typeof(p) )
			{
			case "integer":
			case "float":
				return ::vec3(
						(p>vmin) ? ((p<vmax.___immutable_x) ? (p-vmin)/(vmax.___immutable_x-vmin+0.) : 1.) : 0.,
						(p>vmin) ? ((p<vmax.___immutable_y) ? (p-vmin)/(vmax.___immutable_y-vmin+0.) : 1.) : 0.,
						(p>vmin) ? ((p<vmax.___immutable_z) ? (p-vmin)/(vmax.___immutable_z-vmin+0.) : 1.) : 0.
					)
			}
		}
		else switch( typeof(vmax) )
		{
		case "integer":
		case "float":
			if( p instanceof ::vec2 )
			{
				return ::vec2(
						(p.___immutable_x>vmin) ? ((p.___immutable_x<vmax) ? (p.___immutable_x-vmin)/(vmax-vmin+0.) : 1.) : 0.,
						(p.___immutable_y>vmin) ? ((p.___immutable_y<vmax) ? (p.___immutable_y-vmin)/(vmax-vmin+0.) : 1.) : 0.
					)
			}
			else if( p instanceof ::vec3 )
			{
				return ::vec3(
						(p.___immutable_x>vmin) ? ((p.___immutable_x<vmax) ? (p.___immutable_x-vmin)/(vmax-vmin+0.) : 1.) : 0.,
						(p.___immutable_y>vmin) ? ((p.___immutable_y<vmax) ? (p.___immutable_y-vmin)/(vmax-vmin+0.) : 1.) : 0.,
						(p.___immutable_z>vmin) ? ((p.___immutable_z<vmax) ? (p.___immutable_z-vmin)/(vmax-vmin+0.) : 1.) : 0.
					)
			}
			else switch( typeof(p) )
			{
			case "integer":
			case "float":
				return (p>vmin) ? ((p<vmax) ? (p-vmin)/(vmax-vmin+0.) : 1.) : 0.
			}
		}
	}

	throw "smoothstep: doesn't work on "+typeof(vmin)+", "+typeof(vmax)+" and "+typeof(p)
}

